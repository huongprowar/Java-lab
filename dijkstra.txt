    void dijkstra(int fro, int to, RandomAccessFile f) throws IOException {
        boolean[] S = new boolean[n];
        int[] d = new int[n];
        int[] p = new int[n];
        int INF = 999;
        int i, j, k, t;
        for (i = 0; i < n; i++) {
            S[i] = false;
            d[i] = a[fro][i];
            p[i] = fro;
        }
        S[fro] = true;
        while (true) {
            // find d[k] = min {d[i}}
            t = INF;
            k = -1;
            for (i = 0; i < n; i++) {
                if (S[i] == true) {
                    continue;
                }
                if (d[i] < t) {
                    t = d[i];
                    k = i;
                }
            }
            if (k == -1) {
                return;
            }
            // add k to S
            S[k] = true;
            if (k == to) {
                break;
            }
            // update d[i] & p[i]
            for (i = 0; i < n; i++) {
                if (S[i] == true) {
                    continue;
                }
                if (d[i] > d[k] + a[k][i]) {
                    d[i] = d[k] + a[k][i];
                    p[i] = k;
                }
            }
        }
//    System.out.println("The shortest distance is " + d[to]);
        i = to;
        Stack s = new Stack();//store vertex
        ArrayList points = new ArrayList();//store distance
        while (true) {
            s.push(i);
            if (i == fro) {
                break;
            }
            i = p[i];
        }
//print line 1: vertex, line2 : distance

        while (!s.isEmpty()) {
            i = s.pop();
            points.add(i);
        }
        for (int l = 0; l < points.size(); l++) {
            f.writeBytes(v[(int) points.get(l)] + " ");//print vertex
        }
//        f.writeBytes("\n");
//        for (int l = 0; l < points.size(); l++) {
//            f.writeBytes(d[(int) points.get(l)] + " ");//print distance
//        }
        f.writeBytes("\n");

//print (0)A->(9)C->(2)F->(9)E
//        for (int l = 0; l < points.size() - 1; l++) {
//            f.writeBytes("(" + d[(int) points.get(l)] + ")" + v[l] + " " + "->");
//        }
        //     f.writeBytes("(" + d[(int) points.get(points.size() - 1)] + ")" + v[points.size() - 1] + " ");
        f.writeBytes("\n");
    }

//contains the last 3 vertices selected into the set S with their labels
void dijkstra2(int fro, int to, RandomAccessFile f) throws IOException {
        List<Integer> listSelected = new ArrayList<>();
        int INF = 99;
        boolean[] S = new boolean[n];
        int[] d = new int[n];
        int[] p = new int[n];
        int i, j, k, min;
        for (i = 0; i < n; i++) {
            S[i] = false;
            d[i] = a[fro][i];
            p[i] = fro;
        }
        S[fro] = true;
        listSelected.add(fro);
        while (true) {

            min = INF;
            k = -1;
            for (i = 0; i < n; i++) {
                if (S[i]) {
                    continue;
                }
                if (d[i] < min) {
                    min = d[i];
                    k = i;
                }
            }
            if (k == -1) {
                System.out.println("No solution");
                return;
            }

            S[k] = true;
            listSelected.add(k);
            if (k == to) {
                break;
            }   
            for (i = 0; i < n; i++) {
                if (S[i]) {
                    continue;
                }
                if (d[i] > d[k] + a[k][i]) {
                    d[i] = d[k] + a[k][i];
                    p[i] = k;
                }
            }
        }

        i = to;
        Stack s = new Stack();
        s.push(i);
        while (true) {
            i = p[i];
            s.push(i);
            if (i == fro) {
                break;
            }
        }
        
        i = s.pop();
        int mm=listSelected.size() - 3/*<---Edit the number here*/;//contains the last 3 vertices selected into the set S
        f.writeBytes(""+v[listSelected.get(mm)]+ "," + d[listSelected.get(mm)]);
        for (int m = listSelected.size() - 2/*<---Edit the number here but minus 1 more*/; m < listSelected.size(); m++) {
            int index = listSelected.get(m);
            f.writeBytes(" "+v[index]+ "," + d[index]);
        }
        f.writeBytes("\r\n");
    }